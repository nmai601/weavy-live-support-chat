@model User
@if (Model.IsTrashed() && Model.HasPermission(Permission.Delete)) {
    <div class="dropdown" prevent-modal>
        <button type="button" class="btn btn-icon dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="@T["Toggle Dropdown"]">
            @Svg.Icon("dots-vertical")
        </button>
        <div class="dropdown-menu dropdown-menu-right">
            <form action="@(Url.Action<PeopleController>(c => c.Restore(Model.Id)))" method="post" data-turboform>
                <button type="submit" class="dropdown-item">@Svg.Icon("backup-restore", "success") @T["Restore"]</button>
            </form>
            <form action="@(Url.Action<PeopleController>(c => c.Delete(Model.Id)))" method="post" data-turboform>
                @Html.HttpMethodOverride(HttpVerbs.Delete)
                <button type="submit" class="dropdown-item">@Svg.Icon("delete", "danger") @T["Delete"]</button>
            </form>
        </div>
    </div>
} else if (Model.HasPermission(Permission.Edit)) {
    <div class="dropdown" prevent-modal>
        <button type="button" class="btn btn-icon dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="@T["Toggle Dropdown"]">
            @Svg.Icon("dots-vertical")
        </button>
        <div class="dropdown-menu dropdown-menu-right">
            <a class="dropdown-item" href="@(Url.Action<PeopleController>(c => c.Edit(Model.Id)))">@Svg.Icon("pencil", "primary") @T["Edit"]</a>
            @if (Model.Id != User.Id && Model.HasPermission(Permission.Delete)) {
                <button type="button" class="dropdown-item" data-trash="user" data-id="@Model.Id">@Svg.Icon("delete", "danger") @T["Trash"]</button>
            }
        </div>
    </div>
}


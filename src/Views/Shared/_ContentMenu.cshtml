@model Content
@{
    var lockable = Model as ILockable;
    var overrideMenu = (bool?)ViewData["override_menu"] ?? false;

    // back to folder?
    var contentLocation = Model.ParentId != null ? Model.Parent().Url() : Model.App().Url();
}
<div class="dropdown">    
    <button type="button" class="btn btn-icon dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="@T["Toggle Dropdown"]">
        @Svg.Icon("dots-vertical")
    </button>
    <div class="dropdown-menu dropdown-menu-right">

        @if (Model is IFile file) {
            if (file.Blob.Link != null) {
                <a class="dropdown-item" href="@file.Blob.Link" target="_blank">@Svg.Icon(file.Blob.Provider.ToKebabCase(), "native")<span>@T["Open in {0}", file.Blob.Provider]</span></a>
            } else {
                if (FileUtils.IsOfficeDocument(file.Name) && Model.HasPermission(Permission.Edit)) {
                    <a class="dropdown-item" href="@file.OfficeUrl(hmac: true)" target="_top">@Svg.Icon(Model)<span>@T["Open in {0}", OfficeUtils.GetProductName(file.Name)]</span></a>
                }
                <a class="dropdown-item" href="@file.DownloadUrl(download: true)">@Svg.Icon("download", "primary")<span>@T["Download"]</span></a>
            }
        }

        <a class="dropdown-item" href="@Model.Url()/details" data-toggle="modal" data-target="#ajax-modal" data-path="@(Url.Action<ContentController>(c => c.Details(Model.Id)))" data-title="@Model.MetaData().Name @T["Details"]">@Svg.Icon("information-outline", "primary") @T["Details"]</a>

        @if (contentLocation != null && WeavyContext.Current.Content?.Id == Model.Id && overrideMenu) {
            <a class="dropdown-item" href="@contentLocation">@Svg.Icon("link-context", "primary") @T["Open location"] </a>
        }

        <div class="dropdown-divider"></div>

        @if (Model.HasPermission(Permission.Edit)) {
            if (lockable?.LockedById == User.Id) {
                if (Model.MetaData().ModifyMode == UpsertMode.Page) {
                    <a class="dropdown-item" href="@Model.Url()/edit" target="overlay">@Svg.Icon("pencil", "primary")<span>@T["Continue editing"]</span></a>
                } else if (Model.MetaData().ModifyMode == UpsertMode.Modal) {
                    if (Html.HasEditors(except: new List<string> { nameof(Model.Name) })) {
                        <a class="dropdown-item" href="@Model.Url()/edit" data-toggle="modal" data-target="#upsert-content-modal" data-param="@Model.ContentGuid" data-path="@Model.Url()/edit" data-title="@T["Edit"] @Model.MetaData().Name">@Svg.Icon("pencil", "primary")<span>@T["Continue editing"]</span></a>
                    }
                }
            } else if (lockable?.IsLocked() ?? false) {
                <a class="dropdown-item" href="@Model.Url()/edit?force=true">@Svg.Icon("pencil", "primary")<span>@T["Unlock and Edit"]</span></a>
            } else {
                if (Model.MetaData().ModifyMode == UpsertMode.Page) {
                    <a class="dropdown-item" href="@Model.Url()/edit" target="overlay">@Svg.Icon("pencil", "primary")<span>@T["Edit"]</span></a>
                } else if (Model.MetaData().ModifyMode == UpsertMode.Modal) {
                    if (Html.HasEditors(except: new List<string> { nameof(Model.Name) })) {
                        <a class="dropdown-item" href="@Model.Url()/edit" data-toggle="modal" data-target="#upsert-content-modal" data-param="@Model.ContentGuid" data-path="@Model.Url()/edit" data-title="@T["Edit"] @Model.MetaData().Name">@Svg.Icon("pencil", "primary")<span>@T["Edit"]</span></a>
                    }

                }
                <a class="dropdown-item" href="@(Url.Action<ContentController>(c => c.Rename(Model.Id, null)))" data-toggle="modal" data-target="#rename-modal" data-title="@T["Rename"] @Model.MetaData().Name" data-name="@Model.Name">@Svg.Icon("textbox") @T["Rename"]</a>
            }
            if (!IsEmbedded) {
                <button class="dropdown-item" type="button" data-toggle="modal" data-target="#move-content-modal" data-path="@(Url.Action<ContentController>(c => c.MoveModal(Model.Id)))">@Svg.Icon("undo", "warning") @T["Move"]</button>
            }
        }

        <button type="button" class="dropdown-item" data-toggle="modal" data-target="#share-modal" data-share-type="@Model.Type" data-share-id="@Model.Id" data-share-title="Share @Model.Kind()">@Svg.Icon("share-variant", "success") @T["Share"]</button>

        @if (Model is IStarrable starrable) {
            @Html.StarToggle(starrable, false, htmlAttributes: new { @class = "dropdown-item toggle-dropdown" })
        }

        @if (Model is ITaggable taggable) {
            if (Model.HasPermission(Permission.Edit)) {
                <button class="dropdown-item" type="button" data-toggle="modal" data-target="#edit-tags-modal" data-id="@Model.Id" data-tags="@(string.Join(", ", taggable.Tags))">@Svg.Icon("tag", "primary") @T["Tags"]</button>
            } else {
                <button class="dropdown-item" type="button" data-toggle="modal" data-target="#view-tags-modal" data-tags="@(string.Join(", ", taggable.Tags))">@Svg.Icon("tag", "primary") @T["Tags"]</button>
            }
        }

        @if (Model is IFollowable followable) {
            @Html.SubscribeToggle(followable, htmlAttributes: new { @class = "dropdown-item toggle-dropdown" })
        }


        @* NOTE: to avoid some issues with overlays and navigation we avoid trashing from the details view *@
        @if (Model != null && !overrideMenu && Model.HasPermission(Permission.Delete)) {
            <form action="@(Url.Action<ContentController>(c => c.Trash(Model.Id)))" method="post" data-turboform>
                <button type="submit" class="dropdown-item">@Svg.Icon("delete", "danger") @T["Trash"]</button>
            </form>
        }
    </div>
</div>

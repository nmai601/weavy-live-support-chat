@model object
@{
    var attrs = new Dictionary<string, object>();
    attrs["type"] = "text";
    attrs["class"] = "form-control";



    var meta = ViewData.ModelMetadata;
    if (meta.IsReadOnly) {
        attrs["readonly"] = null;
    }

    if (meta.IsRequired) {
        attrs["required"] = null;
    }

    var error = ViewData.ErrorMessage();
    if (error != null) {
        attrs.Append("class", "is-invalid");
    }

    var placeholder = ViewData.PlaceholderText();
    if (placeholder != null) {
        attrs["placeholder"] = placeholder;
    }

    var prop = meta.Property();

    if (prop.MinLength() != null) {
        attrs["minlength"] = prop.MinLength();
    }
    if (prop.MaxLength() != null) {
        attrs["maxlength"] = prop.MaxLength();
    }
    if (prop.Pattern() != null) {
        attrs["pattern"] = prop.Pattern();
    }

    // HACK: used to copy data from input field to specified form (used for Name property in new/edit content)
    if (ViewData["__form"] != null) {
        attrs["data-form"] = ViewData["__form"];
        attrs["id"] = "_" + ViewData.TemplateInfo.GetFullHtmlFieldId(null); // prefix id with _ to avoid multiple elements with same id on page
    }
}
@if (ViewData.RenderSurroundingHtml()) {
    WriteLiteral(@"<div class=""form-group"">");
}
@if (ViewData.RenderLabel()) {
    @Html.LabelFor(m => m)
}
@Html.TextBox("", ViewData.TemplateInfo.FormattedModelValue, attrs)
@if (error != null) {
    <div class="invalid-feedback">@error</div>
} else if (ViewData.RenderDescription()) {
    <div class="form-text">@meta.Description</div>
}
@if (ViewData.RenderSurroundingHtml()) {
    WriteLiteral(@"</div>");
}

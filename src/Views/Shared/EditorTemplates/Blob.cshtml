@model Blob
@{
    var meta = ViewData.ModelMetadata;
    var attrs = new Dictionary<string, object>();
    string id = ViewData.TemplateInfo.GetFullHtmlFieldId("");
    string name = ViewData.TemplateInfo.GetFullHtmlFieldName("");
    bool required = ViewData["Required"] as bool? ?? meta.IsRequired;
    bool remove = ViewData["Remove"] as bool? ?? true;
    bool cloudEnabled = ViewData["CloudEnabled"] as bool? ?? true;
    int size = 128;
    attrs["id"] = id;
    attrs["type"] = "file";
    attrs["class"] = "file-ctrl";
    attrs["data-kind"] = "single-file";
    attrs["data-dropzone"] = ".form-group";

    if (required) {
        attrs["required"] = null;
    }

    var error = ViewData.ErrorMessage();
    if (error != null) {
        attrs.Append("class", "is-invalid");
    }

    var prop = meta.Property();

    var accept = prop.Accept() ?? ConfigurationService.BlobWhitelist;
    if (accept != null) {
        attrs["accept"] = accept;
    }

    if (prop.MaxSize() != null) {
        attrs["data-max-size"] = prop.MaxSize();
    }

    string placeholder = meta.Watermark ?? T["Choose file"].ToString();
    string placeholderImage = prop.PlaceholderImage() != null ? Url.Content(prop.PlaceholderImage()) : null;
    if (placeholderImage != null) {
        attrs["data-kind"] = "thumb";
    }

    string previewImage = ViewData["PreviewImage"] as string;
    if (previewImage == null && prop.Name == nameof(IHasAvatar.Avatar) && ViewData.ModelMetadata.Container is IHasAvatar parent) {
        // to avoid a blank preview image for avatars we use the avatar url instead of the blob (blobs are normally only visible to the person that uploaded them)
        previewImage = parent.AvatarUrl(size);
    }
    previewImage = previewImage ?? Model?.ThumbUrl(size, size, retina: true, fit: FitMode.Crop, scale: ScaleMode.Both) ?? placeholderImage;
}

@if (ViewData.RenderSurroundingHtml()) {
    WriteLiteral(@"<div class=""form-group"">");
}
@if (ViewData.RenderLabel()) {
    <label>@meta.DisplayName</label>
}

<div class="file-upload">
    <input type="hidden" name="@name" value="@(Model != null ? Model.Id.ToString() : "delete")" />
    @if (placeholderImage != null) {
        <label class="custom-file custom-image">
            <img class="img-@size" src="@previewImage" data-thumb="@placeholderImage" alt="" width="@size" height="@size" />
            <span class="custom-file-label">@placeholder</span>
            <input @Html.Attributes(attrs) />
            <span class="progress d-none">
                <span class="progress-bar" role="progressbar"></span>
            </span>
        </label>
    } else {
        <div class="input-group single-blob-upload">
            <div class="progress d-none">
                <div class="progress-bar" role="progressbar"></div>
            </div>
            @if (cloudEnabled) {
                @Weavy.Utils.HtmlUtils.Filebrowser(null, false, accept, "single-file", align: "dropdown-menu-right", htmlAttributes: new { data_dropzone = ".form-group" })
            } else {
                <input @Html.Attributes(attrs) />
            }
            <input type="text" class="form-control" placeholder="@(ViewData["Placeholder"] ?? Model?.Name)" />
            <div class="input-group-append">
                <button class="btn input-group-text" type="button">@T["Browse"]</button>
            </div>
        </div>
    }
    <div class="invalid-feedback@(error != null ? " d-block" : "")">@error</div>
    <div class="form-text@(error != null ? " d-none" : "")">
        @meta.Description
        @if (remove) {
            <a href="javascript:;" class="clear@(Model == null ? " d-none" : "")">@T["Remove"] @meta.DisplayName.ToLower().</a>
        }
    </div>
</div>

@if (ViewData.RenderSurroundingHtml()) {
    WriteLiteral(@"</div>");
}

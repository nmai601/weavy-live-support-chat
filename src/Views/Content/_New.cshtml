@model Content
@{
    var blobIds = ViewBag.BlobIds as IEnumerable<int>;
    var draftable = Model as IDraftable;
    var createMode = Model.MetaData().CreateMode;

    var attrs = new Dictionary<string, object>(){
        { "action", (WeavyContext.Content?.Url() ?? WeavyContext.App?.Url()) + "/content" },
        { "method", "post" },
        { "autocomplete", "off" },
        { "novalidate", "" }
    };

    if (draftable != null) {
        attrs.Add("class", "autosave");
        attrs.Add("data-status", "#autosave-status");
        if (draftable.IsDraft) {
            attrs.Add("data-is-draft", "true");
        }
    }

    if (ViewData["turboform"] != null) {
        attrs.Add("data-turboform", "");
    }
}

<form id="content-form" @Html.Attributes(attrs)>
    @Html.Hidden(nameof(Guid), Model.ContentGuid)

    @if (createMode == UpsertMode.Modal) {
        @Html.EditorsForModel()
        <div class="form-buttons">
            <button type="submit" class="btn btn-primary" name="operation" value="insert">@Model.MetaData().CreateVerb</button>
            @if (draftable != null) {
                <button type="submit" class="btn btn-outline-secondary" name="operation" value="draft">@T["Save draft"]</button>
            }
            <div class="text-muted ml-auto" id="autosave-status"></div>
        </div>
    } else if (createMode == UpsertMode.Page) {
        @Html.Hidden(nameof(Model.Name), Model.Name)
        @Html.EditorsForModel(exclude: new string[] { nameof(Model.Name) })

        @* hidden, triggered from navbar *@
        <div class="d-none">
            <button type="submit" name="operation" value="insert">@Model.MetaData().CreateVerb</button>
            @if (draftable != null) {
                < button type = "submit" name = "operation" value = "draft" > @T["Save draft"] </ button >
            }
        </div>
    }

    <div id="blobs">
        @* container for blobs uploaded during edit, they will be converted to attachments on successful insert/update *@
        @if (blobIds != null && blobIds.Any()) {
            foreach (var id in blobIds) {
                <input type="hidden" name="blobs" value="@id" />
            }
        }
    </div>
</form>

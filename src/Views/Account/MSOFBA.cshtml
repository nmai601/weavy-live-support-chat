@using Microsoft.Owin.Security
@using Weavy.Web.Controllers
@model Weavy.Web.Models.SignInModel
@{
    Layout = null;
    BodyAttributes.Add("class", "body-dark");
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>@Theme.Name</title>
    @Html.ThemeStyle("~/styles/weavy.scss")
    @if (Model != null) {
        @Bundler.Scripts("~/scripts/msofba.bundle")
    }
</head>
<body @RenderBodyAttributes()>
    @if (Model != null) {
        if (Model.HMAC != null) {
            <table class="h-100 w-100">
                <tbody>
                    <tr>
                        <td class="align-middle text-center">
                            @Html.IconImg(96)
                            @using (Html.BeginForm(nameof(AccountController.SignInHMAC), typeof(AccountController).ControllerName(), new { path = Model.Path }, FormMethod.Post, new { novalidate = "", id = "sign-in-form" })) {
                                @Html.HiddenFor(x => x.HMAC)
                            }
                        </td>
                    </tr>
                </tbody>
            </table>
        } else {
            <main>
                <div class="container">
                    <div class="row justify-content-sm-center">
                        <div class="col-sm-8 col-md-6 col-lg-5">
                            <div class="text-center my-3">
                                @Html.IconImg(96)
                            </div>
                            @if (ConfigurationService.FormsAuthentication) {
                                using (Html.BeginForm(nameof(AccountController.SignIn), typeof(AccountController).ControllerName(), new { path = Model.Path }, FormMethod.Post, new { novalidate = "", id = "sign-in-form" })) {
                                    <div class="form-group">
                                        @Html.EditorFor(x => x.Username, new { HideSurroundingHtml = true })
                                    </div>
                                    <div class="form-group">
                                        @Html.EditorFor(x => x.Password, new { HideSurroundingHtml = true })
                                    </div>
                                    <div class="form-buttons align-items-baseline">
                                        <button type="submit" class="btn btn-primary ml-auto">@T["Sign in"]</button>
                                    </div>
                                }
                            }

                            @if (Model.AuthenticationTypes != null && Model.AuthenticationTypes.Any()) {
                                <p class="text-center mt--3">&ndash; @T["or"] &ndash;</p>
                                using (Html.BeginForm(nameof(AccountController.SignInExternal), typeof(AccountController).ControllerName(), new { path = Model.Path }, FormMethod.Post)) {
                                    <div class="buttons text-center">
                                        @foreach (AuthenticationDescription ad in Model.AuthenticationTypes) {
                                            <button type="submit" class="btn btn-primary mb-3" id="@ad.AuthenticationType" name="provider" value="@ad.AuthenticationType">@Svg.Icon(ad.AuthenticationType) @T["Sign in with {0}", ad.Caption]</button>
                                        }
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </main>
        }
        if (Model.HMAC != null) {
            <script>
                // autopost
                $("#sign-in-form").submit();
            </script>
        }
    }
</body>
</html>

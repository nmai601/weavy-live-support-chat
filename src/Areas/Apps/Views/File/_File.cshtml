@model Weavy.Core.Models.File
@using System.Collections.Specialized

@{
    var versionable = Model as IVersionable;
    var current = versionable != null ? versionable.IsCurrent() : true;

    var fmt = Model.Blob.Link != null ? PreviewFormat.Icon : FileUtils.GetPreviewFormat(Model.Blob.Name);
    NameValueCollection attrs = fmt == PreviewFormat.Image || fmt == PreviewFormat.Document ? Html.PreviewAttributes(Model) : null;
}

<section class="content-section content-viewer">
    @if (fmt == PreviewFormat.Text) {
        var lang = FileUtils.SyntaxHighlight(Model.GetTitle());
        <div class="content-text scroll-y@(lang != null ? " content-code" : "")">
            @if (lang != null) {
                <pre class="language-@lang line-numbers"><code class="language-@lang">@System.IO.File.ReadAllText(BlobService.GetContent(Model.Blob).FullName)</code></pre>
            } else {
                <pre class="document">@System.IO.File.ReadAllText(BlobService.GetContent(Model.Blob).FullName)</pre>
            }
        </div>

    } else if (fmt == PreviewFormat.Image) {

        if (Model.Blob.Width != null && Model.Blob.Height != null) {
            <div class="content-image responsive-image" style="--width: @Model.Blob.Width; --height: @Model.Blob.Height">
                <img class="loading" src="@attrs["data-src"]" width="@Model.Blob.Width" height="@Model.Blob.Height" decoding="async" />
                @Svg.Spinner(spin: true)
            </div>
        } else {
            <div class="content-image responsive-image intrinsic-image">
                <img class="loading" src="@attrs["data-src"]" decoding="async" />
            </div>
        }

        <script type="text/javascript">
            wvy.whenLoaded.checkImageLoad();
        </script>
    } else if (fmt == PreviewFormat.Document) {
        Html.RenderPartial("_Pdf");
        <script type="text/javascript" async>
                    var previewOptions = {
                        url: "@Model.Url()",
                        src: "@attrs["data-src"]",
                        preview: "@attrs["data-preview"]", // url to pdf
                        //name: "@attrs["data-name"]", // name to display in header
                        icon: "@attrs["data-icon"]", // icon of item (used for open in office)
                        download: "@attrs["data-download"]", // url for downloading file
                        office: "@attrs["data-office"]", // url for opening document in office
                        //starred: @(attrs["data-starred"] == "true" ? "true" : "false"), // true|false indicating if document is starred (if starrable)
                        //comments: @(attrs["data-comments"] ?? "null"), // number of comments (if commentable)
                        type: "@attrs["data-type"]", // the entity type (attachment or content)
                        id: @attrs["data-id"] // the entity id
                    };

                    wvy.whenLoaded.then(function () {
                        wvy.preview.open(previewOptions);
                    });
        </script>



    } else if (fmt == PreviewFormat.Video) {
        <video id="content-video" class="content-video loading" controls crossorigin="use-credentials" autoplay>
            <source src="@Model.DownloadUrl()" type="@Model.Blob.MediaType" />
            <div class="content-media">
                <div class="content-icon">
                    @Svg.Icon(Model.GetIcon())
                </div>
                <div class="content-name">
                    <a href="@Model.DownloadUrl(download: true)">@Model.GetTitle()</a>
                </div>
            </div>
        </video>
        @Svg.Spinner(size: 48, spin: true);
    } else if (fmt == PreviewFormat.Audio) {

        <div class="content-media">
            <div class="content-icon">
                @Svg.Icon(Model.GetIcon())
            </div>
            <div class="content-name">
                <a href="@Model.DownloadUrl(download: true)">@Model.GetTitle()</a>
            </div>
            <audio id="content-audio" class="content-audio loading mt-3" controls crossorigin="use-credentials" autoplay>
                <source src="@Model.DownloadUrl()" type="@Model.Blob.MediaType" />
            </audio>
        </div>
    } else if (Model.Blob.Embed != null && WeavyContext.Browser.Platform != "iOS") { // Add "&& !WeavyContext.Browser.Mobile" to override to fallback in mobile
        @* iframe needs to be object to not render error pages when content is blocked *@
        <object class="content-iframe loading" data="@Model.Blob.Embed"></object>
        @Svg.OverlaySpinner(spin: true, id: "content-iframe-spinner")
        <div class="content-media content-iframe-fallback">
            <div class="content-icon">
                @Svg.Icon(Model.GetIcon())
            </div>
            <div class="content-name">
                <a href="@Model.Blob.Link" target="_blank" title="@T["Open in {0}", Model.Blob.Provider]">@Model.GetTitle() @Svg.Icon("open-in-new", null, 18)</a>
            </div>
        </div>
    } else if (Model.Blob.Link != null) {
        <div class="content-media">
            <div class="content-icon">
                @Svg.Icon(Model.GetIcon())
            </div>
            <div class="content-name">
                <a href="@Model.Blob.Link" target="_blank" title="@T["Open in {0}", Model.Blob.Provider]">@Model.GetTitle() @Svg.Icon("open-in-new", null, 18)</a>
            </div>
        </div>
    } else {
        <div class="content-media">
            <div class="content-icon">
                @Svg.Icon(Model.GetIcon())
            </div>
            <div class="content-name">
                <a href="@Model.DownloadUrl(download: true)" title="@T["Download"]">@Model.GetTitle()</a>
            </div>
        </div>
    }
</section>

